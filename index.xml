<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>meinego</title>
    <link>https://meinego.github.io/</link>
    <description>Recent content on meinego</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <copyright>© {year}</copyright>
    <lastBuildDate>Fri, 08 Apr 2022 16:48:58 +0900</lastBuildDate><atom:link href="https://meinego.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1238. 파티</title>
      <link>https://meinego.github.io/acm/1238/</link>
      <pubDate>Fri, 08 Apr 2022 16:48:58 +0900</pubDate>
      
      <guid>https://meinego.github.io/acm/1238/</guid>
      <description>문제 다익스트라 문제로 N-&amp;gt;X 의 최단거리와 X-&amp;gt;N의 최단거리 합의 최댓값 구하기.
풀이 X-&amp;gt;N 은 기본 다익스트라로 구하면 된다.
N-&amp;gt;X를 구하기 위해서는 단방향인 edge 들을 시작지점과 끝지점을 거꾸로 생각해서
다익스트라를 돌리면 된다.
구현 포인트는 다음과 같다.
 Comparable을 상속하는 Item data class 선언 dist[x] 를 0으로 초기화하는 것 우선순위 큐에서 넣고 꺼낼 때 dist[u] &amp;gt; cost 일 때만 처리하는 것  코드 //kotlin data class Item(val v:Int, val w:Int): Comparable&amp;lt;Item&amp;gt; { override fun compareTo(other: Item): Int = w - other.</description>
    </item>
    
    <item>
      <title>17435. 합성함수와 쿼리</title>
      <link>https://meinego.github.io/acm/17435/</link>
      <pubDate>Tue, 05 Apr 2022 16:18:24 +0900</pubDate>
      
      <guid>https://meinego.github.io/acm/17435/</guid>
      <description>문제 \(f_1(x)\text{ 가 주어질 때, } f_n(x) 를 구하는 문제 \)
풀이 \(\text{LCA와 비슷하게 }f_1(x),\space f_2(x),\space f_4(x),\space &amp;hellip;\text{ 을 저장하면}\)
\(O(logN) \text{ 만에 구할 수 있다.} \)
코드 //kotlin fun main(args: Array&amp;lt;String&amp;gt;) { val n = readInt() val arr = readIntArray() val f = Array(n+1) { IntArray(20)} for (i in 1..n) f[i][0] = arr[i-1] for (j in 1..19) for (i in 1..n) f[i][j] = f[f[i][j-1]][j-1] repeat(readInt()) { var (n,x) = readIntArray() for (k in 19 downTo 0) if (n &amp;gt;= 1.</description>
    </item>
    
    <item>
      <title>2295. 세 수의 합</title>
      <link>https://meinego.github.io/acm/2295/</link>
      <pubDate>Tue, 05 Apr 2022 14:40:35 +0900</pubDate>
      
      <guid>https://meinego.github.io/acm/2295/</guid>
      <description>문제 집합 속 원소 셋의 합이 집합에 속할 때 가장 큰 합을 구하여라
풀이 \( \text{단순 반복으로 풀면} \space O(N^3 log N) 이다. \)
\( \text{A+B+C=S 일 때, A+B = S-C 이고 A,B,C,S 모두 집합의 원소이므로 } \)
\( \text{A+B 의 합을 우선 저장한 후, }O(N^2) \text{ 에 S-C를 돌면서 구한 합들 중에 } \)
\( \text{있는지 확인하면 된다. } O(logN)\)
코드 // kotlin fun main(args: Array&amp;lt;String&amp;gt;) { val n = readInt() val arr = IntArray(n) {readInt()} arr.</description>
    </item>
    
    <item>
      <title>Maven 플젝 만들어보기</title>
      <link>https://meinego.github.io/spring/maven/</link>
      <pubDate>Mon, 04 Apr 2022 21:29:06 +0900</pubDate>
      
      <guid>https://meinego.github.io/spring/maven/</guid>
      <description>Java의 npm 같은 프로젝트 관리툴이라 함. Ant의 대용으로 만들어졌다고 하며, 현재는 gradle이 더 선호되는 듯 함 책의 예제가 maven이라 maven부터 시작하기로 함 (또한 여러기업에서도 여전히 maven을 쓰고 있을 것 같음)  프로젝트 생성 npm init 과 같다
참고: Maven – Maven in 5 Minutes
대화형으로 프로젝트 정보를 입력하려면
mvn archetype:generate  값을 다 주려면
mvn archetype:generate -DgroupId=org.meinego.app -DartifactId=spring-study -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false  프로젝트를 생성하면 다음과 같은 구조를 가지게 된다.</description>
    </item>
    
    <item>
      <title>11438. LCA 2</title>
      <link>https://meinego.github.io/acm/11438/</link>
      <pubDate>Thu, 24 Mar 2022 18:55:25 +0900</pubDate>
      
      <guid>https://meinego.github.io/acm/11438/</guid>
      <description>문제 루트가 1인 트리가 주어질 때 최소공통조상을 \(O(log N)\)에 찾는 문제
풀이 노드마다 \(2^{i}\) 번째 부모를 미리 구해놓으면 된다.
\(\text{1. DFS를 통해 노드들의 depth를 구한다.}\)
\(\text{2. parent[node_idx][max_log_n] 을 전부 구한다.}\)
\(\text{3. 찾으려고하는 노드 A, B의 depth를 같게 만든다.}\)
\(\text{4. 부모가 같아질 때까지 A, B를 거슬러 올라간다. }\)
코드 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; #define N 100&#39;000 #define logN 16 vector&amp;lt;int&amp;gt; adj[N+1]; int d[N+1], p[N+1][logN+1]; int n,m; void dfs(int u) { for (int v: adj[u]) { if (d[v] !</description>
    </item>
    
    <item>
      <title>1657. Edu 125</title>
      <link>https://meinego.github.io/cf/1657/</link>
      <pubDate>Wed, 23 Mar 2022 21:09:25 +0900</pubDate>
      
      <guid>https://meinego.github.io/cf/1657/</guid>
      <description>A. Integer Moves 0 &amp;lt;= x,y &amp;lt;= 50 인 정수 x,y가 주어질 때, (0,0)에서 (x,y)로 이동하려고 한다.
정수좌표 (a,b)들을 거쳐가며, 이동거리들은 모두 정수가 되어야 할 때 최소 이동횟수를 구하는 문제다.
풀이 모든 (x,y) 에 대해 (0,0) -&amp;gt; (0, x) -&amp;gt; (x,y) 와 같은 이동이 가능하므로 답의 상한은 2이다. (3,4) 와 같이 (0,0)으로부터 거리가 정수인 점들은 1이다. (0,0) 은 0이다.
코드 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; #define N 100&#39;000 int n; int main() { ios::sync_with_stdio(false); cin.</description>
    </item>
    
    <item>
      <title>404</title>
      <link>https://meinego.github.io/blog/404/</link>
      <pubDate>Tue, 22 Mar 2022 22:49:21 +0900</pubDate>
      
      <guid>https://meinego.github.io/blog/404/</guid>
      <description></description>
    </item>
    
    <item>
      <title>1620. 나는야 포켓몬 마스터 이다솜</title>
      <link>https://meinego.github.io/acm/1620/</link>
      <pubDate>Tue, 22 Mar 2022 20:52:57 +0900</pubDate>
      
      <guid>https://meinego.github.io/acm/1620/</guid>
      <description>문제 포켓몬 도감이 주어질 때 index -&amp;gt; 포켓몬이름, 포켓몬이름-&amp;gt;index 를 구하는 문제
풀이 map을 2개 생성하고 조회하면 된다.
코드 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; #define N 100&#39;000 string arr[N+1]; int n, m; int main() { ios::sync_with_stdio(false); cin.tie(0); cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;m; map&amp;lt;string, string&amp;gt; name2id; map&amp;lt;string, string&amp;gt; id2name; for (int i=1; i&amp;lt;=n; ++i) { string s; cin&amp;gt;&amp;gt;s; name2id[s] = to_string(i); id2name[to_string(i)] = s; } for (int i=0; i&amp;lt;m; ++i) { string s; cin&amp;gt;&amp;gt;s; if (name2id.</description>
    </item>
    
    <item>
      <title>11723. 집합</title>
      <link>https://meinego.github.io/acm/11723/</link>
      <pubDate>Tue, 22 Mar 2022 20:24:42 +0900</pubDate>
      
      <guid>https://meinego.github.io/acm/11723/</guid>
      <description>문제 비어있는 공집합 S가 주어졌을 때, 아래 연산을 수행하는 프로그램을 작성하시오.
add x S에 x를 추가한다. (1 ≤ x ≤ 20) S에 x가 이미 있는 경우에는 연산을 무시한다.
remove x S에서 x를 제거한다. (1 ≤ x ≤ 20) S에 x가 없는 경우에는 연산을 무시한다.
check x S에 x가 있으면 1을, 없으면 0을 출력한다. (1 ≤ x ≤ 20)
toggle x S에 x가 있으면 x를 제거하고, 없으면 x를 추가한다. (1 ≤ x ≤ 20)</description>
    </item>
    
    <item>
      <title>1000. A&#43;B</title>
      <link>https://meinego.github.io/acm/1000/</link>
      <pubDate>Tue, 22 Mar 2022 20:21:49 +0900</pubDate>
      
      <guid>https://meinego.github.io/acm/1000/</guid>
      <description>문제 0 &amp;lt; A, B &amp;lt; 10 자연수가 주어질 때, A+B를 구하는 문제
풀이 stdout으로 A+B를 출력하면 된다.
코드 #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; int a,b; int main() { cin&amp;gt;&amp;gt;a&amp;gt;&amp;gt;b; cout &amp;lt;&amp;lt; a+b; return 0; }  링크 https://acmicpc.net/problem/1000</description>
    </item>
    
    <item>
      <title>7662. 이중 우선순위 큐</title>
      <link>https://meinego.github.io/acm/7662/</link>
      <pubDate>Tue, 22 Mar 2022 19:35:14 +0900</pubDate>
      
      <guid>https://meinego.github.io/acm/7662/</guid>
      <description>문제 m &amp;lt;= 1e6 다음 연산들을 총 m번 수행 후 큐의 최댓값, 최솟값을 구하라.
I x x를 추가
D 1 최댓값을 삭제
D -1 최솟값을 삭제
단, 같은 값을 여러번 추가할 수 있으며, 빈 큐에 삭제 연산이 불릴 수도 있다.
m번의 연산 후 큐가 비어있으면 EMPTY를 출력한다.
풀이 추가 시엔 최소힙과 최대힙에 넣고 삭제시엔 하나의 힙에서 삭제한다.
큐에 들어가 있는 개수를 저장하여 큐가 비었는지 확인하며
삽입된 수마다 큐에 있는 개수를 저장하여 삭제시에 유효한 값인지 확인한다.</description>
    </item>
    
    <item>
      <title>Hugo로 블로그 만들기</title>
      <link>https://meinego.github.io/blog/first_post/</link>
      <pubDate>Tue, 22 Mar 2022 15:34:31 +0900</pubDate>
      
      <guid>https://meinego.github.io/blog/first_post/</guid>
      <description>개요  신입 공채 지원서 쓰는데 github 이나 dev blog를 요구하더라 go언어 공부할 겸 hugo로 만들어보자 사실 나도 github.io 블로그 만들고 싶긴했다  Hugo  Go언어로 만든 static site generator custom을 Go언어를 이용해서 한다.  blog engine 사용 시 한계  이미지 파일을 모두 저장해야한다(url이 있어야 함) 새 글을 쓰면 GitHub에 push해야한다. 마크다운을 잘 사용해야한다 미관상 신경써야할 부분이 많다 custom 할 줄 알아야한다. (Go언어 사용)  사이트 만들기  먼저 GitHub repo를 2개 만든다.</description>
    </item>
    
  </channel>
</rss>
